import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import datetime

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

def load_imeniny(filename='imeniny_year.txt'):
    imeniny_by_date = {}
    imeniny_by_name = {}

    with open(filename, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line or ':' not in line:
                continue
            date_part, names_part = line.split(':', 1)
            date_part = date_part.strip()
            names = [name.strip() for name in names_part.split(',')]
            imeniny_by_date[date_part] = names
            for name in names:
                if name not in imeniny_by_name:
                    imeniny_by_name[name] = []
                imeniny_by_name[name].append(date_part)
    
    return imeniny_by_date, imeniny_by_name

imeniny_by_date, imeniny_by_name = load_imeniny()

months_ru = {
    "01": "—è–Ω–≤–∞—Ä—è", "02": "—Ñ–µ–≤—Ä–∞–ª—è", "03": "–º–∞—Ä—Ç–∞", "04": "–∞–ø—Ä–µ–ª—è",
    "05": "–º–∞—è", "06": "–∏—é–Ω—è", "07": "–∏—é–ª—è", "08": "–∞–≤–≥—É—Å—Ç–∞",
    "09": "—Å–µ–Ω—Ç—è–±—Ä—è", "10": "–æ–∫—Ç—è–±—Ä—è", "11": "–Ω–æ—è–±—Ä—è", "12": "–¥–µ–∫–∞–±—Ä—è"
}

def format_date(date_str):
    day, month = date_str.split("-")
    return f"{int(day)} {months_ru[month]}"

main_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–°–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"), KeyboardButton("–ü–æ –∏–º–µ–Ω–∏")]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–º–µ–Ω–∏–Ω—ã.\n"
        "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ —É –Ω–µ–≥–æ –∏–º–µ–Ω–∏–Ω—ã.",
        reply_markup=main_keyboard
    )

async def today_imeniny(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.datetime.now().strftime('%d-%m')
    names = imeniny_by_date.get(today)
    if names:
        await update.message.reply_text(f"üéâ –°–µ–≥–æ–¥–Ω—è ({today}) –∏–º–µ–Ω–∏–Ω—ã —É: {', '.join(names)}")
    else:
        await update.message.reply_text("üòî –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip()

    if msg.lower() == "—Å–µ–≥–æ–¥–Ω—è":
        await today_imeniny(update, context)
        return

    if msg.lower() == "–≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25-07)")
        return

    if msg.lower() == "–ø–æ –∏–º–µ–Ω–∏":
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–µ–π)")
        return

    try:
        datetime.datetime.strptime(msg, '%d-%m')
        names = imeniny_by_date.get(msg)
        if names:
            await update.message.reply_text(f"üéà –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ –Ω–∞ {msg}: {', '.join(names)}")
        else:
            await update.message.reply_text(f"üôÅ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞ {msg} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    except ValueError:
        pass

    name = msg.capitalize()
    dates = imeniny_by_name.get(name)
    if dates:
        formatted = [format_date(d) for d in dates]
        await update.message.reply_text(
            f"üìÖ –£ {name} –∏–º–µ–Ω–∏–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏:\n" + ', '.join(formatted)
        )
    else:
        await update.message.reply_text(f"üîç –ò–º—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–º–µ–Ω–∏–Ω.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", today_imeniny))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
